\hypertarget{avltree_8h}{}\section{avltree.\+h File Reference}
\label{avltree_8h}\index{avltree.\+h@{avltree.\+h}}


Interface of A\+VL tree.  


{\ttfamily \#include \char`\"{}node.\+h\char`\"{}}\\*
{\ttfamily \#include $<$assert.\+h$>$}\\*
Include dependency graph for avltree.\+h\+:
% FIG 0
\subsection*{Data Structures}
\begin{DoxyCompactItemize}
\item 
struct \hyperlink{structAVLTree}{A\+V\+L\+Tree}
\begin{DoxyCompactList}\small\item\em Structure that represents the \hyperlink{structAVLTree}{A\+V\+L\+Tree}. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Typedefs}
\begin{DoxyCompactItemize}
\item 
typedef struct \hyperlink{structAVLTree}{A\+V\+L\+Tree} \hyperlink{avltree_8h_a57633bce3996fc8f169148d360593f84}{A\+V\+L\+Tree}\hypertarget{avltree_8h_a57633bce3996fc8f169148d360593f84}{}\label{avltree_8h_a57633bce3996fc8f169148d360593f84}

\begin{DoxyCompactList}\small\item\em Structure that represents the \hyperlink{structAVLTree}{A\+V\+L\+Tree}. \end{DoxyCompactList}\end{DoxyCompactItemize}
\subsection*{Functions}
\begin{DoxyCompactItemize}
\item 
static int \hyperlink{avltree_8h_a9788a89a1fa912669102bc6049a9ed9b}{max} (int val1, int val2)
\begin{DoxyCompactList}\small\item\em Returns the maximum of two integers. \end{DoxyCompactList}\item 
static \hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$ \hyperlink{avltree_8h_ae1bb5a588fecbfc05f0cd9584288ca6d}{new\+A\+V\+L\+Tree} ()
\begin{DoxyCompactList}\small\item\em Constructs a new instance of a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. \end{DoxyCompactList}\item 
static bool \hyperlink{avltree_8h_aee91b643a87e1c6cb0325eb40dfc5a37}{is\+Empty} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree)
\begin{DoxyCompactList}\small\item\em Checks if the \hyperlink{structAVLTree}{A\+V\+L\+Tree} is empty. \end{DoxyCompactList}\item 
static bool \hyperlink{avltree_8h_a35e56a639a24c907151220460f2032f8}{is\+Inserted} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, \hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Checks if a node was inserted into a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. \end{DoxyCompactList}\item 
static void \hyperlink{avltree_8h_ae3cf0ae93e6863b21c07adddd241d78b}{set\+Heights} (\hyperlink{structNode}{Node} $\ast$node, int $\ast$left\+Height, int $\ast$right\+Height)
\begin{DoxyCompactList}\small\item\em Sets the variables left\+Height and right\+Height with according heights of nodes children. \end{DoxyCompactList}\item 
static void \hyperlink{avltree_8h_a316c276fc7bfdf19ea896aad623a86a4}{set\+According\+Height} (\hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Sets the node height attribute correctly. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_a49cec04b2fabf93fdea8a72bff521c72}{rotate\+Left} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, \hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Rotates the tree left in the node position. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_a46d7ef0fcb978fc5e35a595b46cfc2e0}{rotate\+Right} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, \hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Rotates the tree right in the node position. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_ae406d2cd9db8ec28312953361fc1d37b}{print\+A\+V\+L\+Tree\+P\+LR} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree)
\begin{DoxyCompactList}\small\item\em Prints the avltree in preorder left right. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_afca91c531c7215b2c2403b5c7a925bee}{print\+Tree\+P\+LR} (\hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Prints the node in preorder left right. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_a85b55f7a073e43bab8ffe2a1b413fa37}{insert\+B\+ST} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, \hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Inserts as if into a B\+ST tree. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_a4f3e8c2f2fda6a69d52b2081bdce9e55}{insert} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, int value)
\begin{DoxyCompactList}\small\item\em Inserts a node into a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. \end{DoxyCompactList}\item 
\hyperlink{structNode}{Node} $\ast$ \hyperlink{avltree_8h_aab24dcc91b3e3441809f840689b348a8}{find\+Inorder\+Successor} (\hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Find inoreder successor of a node. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_a02cf481ce67f4289c5c19c0a2287a136}{balance} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, \hyperlink{structNode}{Node} $\ast$node)
\begin{DoxyCompactList}\small\item\em Restores the values of a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. \end{DoxyCompactList}\item 
\hyperlink{structNode}{Node} $\ast$ \hyperlink{avltree_8h_ac3475186366ff6453dc39426d9ed8537}{find\+Node} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, int value)
\begin{DoxyCompactList}\small\item\em Finds the pointer to a node. \end{DoxyCompactList}\item 
void \hyperlink{avltree_8h_aa53cb5c2ab09f4a955d5a6ea2dc12456}{delete\+Node} (\hyperlink{structAVLTree}{A\+V\+L\+Tree} $\ast$avltree, int value)
\begin{DoxyCompactList}\small\item\em Deletes a value of a tree. \end{DoxyCompactList}\end{DoxyCompactItemize}


\subsection{Detailed Description}
Interface of A\+VL tree. 

\begin{DoxyAuthor}{Author}
Marian Dabrowski 
\end{DoxyAuthor}


\subsection{Function Documentation}
\index{avltree.\+h@{avltree.\+h}!balance@{balance}}
\index{balance@{balance}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{balance(\+A\+V\+L\+Tree $\ast$avltree, Node $\ast$node)}{balance(AVLTree *avltree, Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}void balance (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_a02cf481ce67f4289c5c19c0a2287a136}{}\label{avltree_8h_a02cf481ce67f4289c5c19c0a2287a136}


Restores the values of a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & the avltree to be corrected \\
\hline
\mbox{\tt in}  & {\em node} & node that was just inserted \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 1


\index{avltree.\+h@{avltree.\+h}!delete\+Node@{delete\+Node}}
\index{delete\+Node@{delete\+Node}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{delete\+Node(\+A\+V\+L\+Tree $\ast$avltree, int value)}{deleteNode(AVLTree *avltree, int value)}}]{\setlength{\rightskip}{0pt plus 5cm}void delete\+Node (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{int}]{value}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_aa53cb5c2ab09f4a955d5a6ea2dc12456}{}\label{avltree_8h_aa53cb5c2ab09f4a955d5a6ea2dc12456}


Deletes a value of a tree. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & the tree where we want to delete the value \\
\hline
\mbox{\tt in}  & {\em value} & the value we want to delete \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 2


\index{avltree.\+h@{avltree.\+h}!find\+Inorder\+Successor@{find\+Inorder\+Successor}}
\index{find\+Inorder\+Successor@{find\+Inorder\+Successor}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{find\+Inorder\+Successor(\+Node $\ast$node)}{findInorderSuccessor(Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Node}$\ast$ find\+Inorder\+Successor (
\begin{DoxyParamCaption}
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_aab24dcc91b3e3441809f840689b348a8}{}\label{avltree_8h_aab24dcc91b3e3441809f840689b348a8}


Find inoreder successor of a node. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em node} & node which successor we wish to find \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
the inoreder successor 
\end{DoxyReturn}
\index{avltree.\+h@{avltree.\+h}!find\+Node@{find\+Node}}
\index{find\+Node@{find\+Node}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{find\+Node(\+A\+V\+L\+Tree $\ast$avltree, int value)}{findNode(AVLTree *avltree, int value)}}]{\setlength{\rightskip}{0pt plus 5cm}{\bf Node}$\ast$ find\+Node (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{int}]{value}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_ac3475186366ff6453dc39426d9ed8537}{}\label{avltree_8h_ac3475186366ff6453dc39426d9ed8537}


Finds the pointer to a node. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & the tree to look into \\
\hline
\mbox{\tt in}  & {\em value} & the value to look for \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
the pointer to the node with value 
\end{DoxyReturn}
\index{avltree.\+h@{avltree.\+h}!insert@{insert}}
\index{insert@{insert}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{insert(\+A\+V\+L\+Tree $\ast$avltree, int value)}{insert(AVLTree *avltree, int value)}}]{\setlength{\rightskip}{0pt plus 5cm}void insert (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{int}]{value}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_a4f3e8c2f2fda6a69d52b2081bdce9e55}{}\label{avltree_8h_a4f3e8c2f2fda6a69d52b2081bdce9e55}


Inserts a node into a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & the tree into which we want to insert \mbox{[}in\mbox{]} value\+: value that we insert \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 3


\index{avltree.\+h@{avltree.\+h}!insert\+B\+ST@{insert\+B\+ST}}
\index{insert\+B\+ST@{insert\+B\+ST}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{insert\+B\+S\+T(\+A\+V\+L\+Tree $\ast$avltree, Node $\ast$node)}{insertBST(AVLTree *avltree, Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}void insert\+B\+ST (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_a85b55f7a073e43bab8ffe2a1b413fa37}{}\label{avltree_8h_a85b55f7a073e43bab8ffe2a1b413fa37}


Inserts as if into a B\+ST tree. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & tree into which the node is to be inserted \\
\hline
\mbox{\tt in}  & {\em node} & node to be inserted \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 4


\index{avltree.\+h@{avltree.\+h}!is\+Empty@{is\+Empty}}
\index{is\+Empty@{is\+Empty}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{is\+Empty(\+A\+V\+L\+Tree $\ast$avltree)}{isEmpty(AVLTree *avltree)}}]{\setlength{\rightskip}{0pt plus 5cm}static bool is\+Empty (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}, {\ttfamily [static]}}\hypertarget{avltree_8h_aee91b643a87e1c6cb0325eb40dfc5a37}{}\label{avltree_8h_aee91b643a87e1c6cb0325eb40dfc5a37}


Checks if the \hyperlink{structAVLTree}{A\+V\+L\+Tree} is empty. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & a instance of a \hyperlink{structAVLTree}{A\+V\+L\+Tree} \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
if the avltree is empty 
\end{DoxyReturn}
\index{avltree.\+h@{avltree.\+h}!is\+Inserted@{is\+Inserted}}
\index{is\+Inserted@{is\+Inserted}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{is\+Inserted(\+A\+V\+L\+Tree $\ast$avltree, Node $\ast$node)}{isInserted(AVLTree *avltree, Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}static bool is\+Inserted (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}, {\ttfamily [static]}}\hypertarget{avltree_8h_a35e56a639a24c907151220460f2032f8}{}\label{avltree_8h_a35e56a639a24c907151220460f2032f8}


Checks if a node was inserted into a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & the \hyperlink{structAVLTree}{A\+V\+L\+Tree} where we check if the node is inserted \\
\hline
\mbox{\tt in}  & {\em node} & node that we check if it was inserted \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
if the node is inserted into this avltree 
\end{DoxyReturn}
\index{avltree.\+h@{avltree.\+h}!max@{max}}
\index{max@{max}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{max(int val1, int val2)}{max(int val1, int val2)}}]{\setlength{\rightskip}{0pt plus 5cm}static int max (
\begin{DoxyParamCaption}
\item[{int}]{val1, }
\item[{int}]{val2}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}, {\ttfamily [static]}}\hypertarget{avltree_8h_a9788a89a1fa912669102bc6049a9ed9b}{}\label{avltree_8h_a9788a89a1fa912669102bc6049a9ed9b}


Returns the maximum of two integers. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em val1} & integer \\
\hline
\mbox{\tt in}  & {\em val2} & integer \\
\hline
\end{DoxyParams}
\begin{DoxyReturn}{Returns}
the maximum of two integers 
\end{DoxyReturn}
\index{avltree.\+h@{avltree.\+h}!new\+A\+V\+L\+Tree@{new\+A\+V\+L\+Tree}}
\index{new\+A\+V\+L\+Tree@{new\+A\+V\+L\+Tree}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{new\+A\+V\+L\+Tree()}{newAVLTree()}}]{\setlength{\rightskip}{0pt plus 5cm}static {\bf A\+V\+L\+Tree}$\ast$ new\+A\+V\+L\+Tree (
\begin{DoxyParamCaption}
{}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}, {\ttfamily [static]}}\hypertarget{avltree_8h_ae1bb5a588fecbfc05f0cd9584288ca6d}{}\label{avltree_8h_ae1bb5a588fecbfc05f0cd9584288ca6d}


Constructs a new instance of a \hyperlink{structAVLTree}{A\+V\+L\+Tree}. 

\begin{DoxyReturn}{Returns}
a new instance of a \hyperlink{structAVLTree}{A\+V\+L\+Tree} 
\end{DoxyReturn}
\index{avltree.\+h@{avltree.\+h}!print\+A\+V\+L\+Tree\+P\+LR@{print\+A\+V\+L\+Tree\+P\+LR}}
\index{print\+A\+V\+L\+Tree\+P\+LR@{print\+A\+V\+L\+Tree\+P\+LR}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{print\+A\+V\+L\+Tree\+P\+L\+R(\+A\+V\+L\+Tree $\ast$avltree)}{printAVLTreePLR(AVLTree *avltree)}}]{\setlength{\rightskip}{0pt plus 5cm}void print\+A\+V\+L\+Tree\+P\+LR (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_ae406d2cd9db8ec28312953361fc1d37b}{}\label{avltree_8h_ae406d2cd9db8ec28312953361fc1d37b}


Prints the avltree in preorder left right. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & tree to be printed \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 5


\index{avltree.\+h@{avltree.\+h}!print\+Tree\+P\+LR@{print\+Tree\+P\+LR}}
\index{print\+Tree\+P\+LR@{print\+Tree\+P\+LR}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{print\+Tree\+P\+L\+R(\+Node $\ast$node)}{printTreePLR(Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}void print\+Tree\+P\+LR (
\begin{DoxyParamCaption}
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_afca91c531c7215b2c2403b5c7a925bee}{}\label{avltree_8h_afca91c531c7215b2c2403b5c7a925bee}


Prints the node in preorder left right. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em node} & node to be printed \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 6


\index{avltree.\+h@{avltree.\+h}!rotate\+Left@{rotate\+Left}}
\index{rotate\+Left@{rotate\+Left}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{rotate\+Left(\+A\+V\+L\+Tree $\ast$avltree, Node $\ast$node)}{rotateLeft(AVLTree *avltree, Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}void rotate\+Left (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_a49cec04b2fabf93fdea8a72bff521c72}{}\label{avltree_8h_a49cec04b2fabf93fdea8a72bff521c72}


Rotates the tree left in the node position. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & tree to be rotated \\
\hline
\mbox{\tt in}  & {\em node} & node to be rotated \\
\hline
\end{DoxyParams}
\index{avltree.\+h@{avltree.\+h}!rotate\+Right@{rotate\+Right}}
\index{rotate\+Right@{rotate\+Right}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{rotate\+Right(\+A\+V\+L\+Tree $\ast$avltree, Node $\ast$node)}{rotateRight(AVLTree *avltree, Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}void rotate\+Right (
\begin{DoxyParamCaption}
\item[{{\bf A\+V\+L\+Tree} $\ast$}]{avltree, }
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)}\hypertarget{avltree_8h_a46d7ef0fcb978fc5e35a595b46cfc2e0}{}\label{avltree_8h_a46d7ef0fcb978fc5e35a595b46cfc2e0}


Rotates the tree right in the node position. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em avltree} & tree to be rotated \\
\hline
\mbox{\tt in}  & {\em node} & node to be rotated \\
\hline
\end{DoxyParams}
\index{avltree.\+h@{avltree.\+h}!set\+According\+Height@{set\+According\+Height}}
\index{set\+According\+Height@{set\+According\+Height}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{set\+According\+Height(\+Node $\ast$node)}{setAccordingHeight(Node *node)}}]{\setlength{\rightskip}{0pt plus 5cm}static void set\+According\+Height (
\begin{DoxyParamCaption}
\item[{{\bf Node} $\ast$}]{node}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}, {\ttfamily [static]}}\hypertarget{avltree_8h_a316c276fc7bfdf19ea896aad623a86a4}{}\label{avltree_8h_a316c276fc7bfdf19ea896aad623a86a4}


Sets the node height attribute correctly. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em node} & node which height is set \\
\hline
\end{DoxyParams}


Here is the call graph for this function\+:
% FIG 7


\index{avltree.\+h@{avltree.\+h}!set\+Heights@{set\+Heights}}
\index{set\+Heights@{set\+Heights}!avltree.\+h@{avltree.\+h}}
\subsubsection[{\texorpdfstring{set\+Heights(\+Node $\ast$node, int $\ast$left\+Height, int $\ast$right\+Height)}{setHeights(Node *node, int *leftHeight, int *rightHeight)}}]{\setlength{\rightskip}{0pt plus 5cm}static void set\+Heights (
\begin{DoxyParamCaption}
\item[{{\bf Node} $\ast$}]{node, }
\item[{int $\ast$}]{left\+Height, }
\item[{int $\ast$}]{right\+Height}
\end{DoxyParamCaption}
)\hspace{0.3cm}{\ttfamily [inline]}, {\ttfamily [static]}}\hypertarget{avltree_8h_ae3cf0ae93e6863b21c07adddd241d78b}{}\label{avltree_8h_ae3cf0ae93e6863b21c07adddd241d78b}


Sets the variables left\+Height and right\+Height with according heights of nodes children. 


\begin{DoxyParams}[1]{Parameters}
\mbox{\tt in}  & {\em node} & node that heights we want to discover \\
\hline
\mbox{\tt in}  & {\em left\+Height} & parameter where we save the left height \\
\hline
\mbox{\tt in}  & {\em right\+Height} & parameter where we save the right height \\
\hline
\end{DoxyParams}
